//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CryptMe_Client.CryptMe {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CryptMe.ICryptMe")]
    public interface ICryptMe {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptMe/CheckUser", ReplyAction="http://tempuri.org/ICryptMe/CheckUserResponse")]
        bool CheckUser(string uname, string upwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptMe/CheckUser", ReplyAction="http://tempuri.org/ICryptMe/CheckUserResponse")]
        System.Threading.Tasks.Task<bool> CheckUserAsync(string uname, string upwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptMe/RegisterUser", ReplyAction="http://tempuri.org/ICryptMe/RegisterUserResponse")]
        bool RegisterUser(string uname, string upwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptMe/RegisterUser", ReplyAction="http://tempuri.org/ICryptMe/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string uname, string upwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptMe/CryptAES", ReplyAction="http://tempuri.org/ICryptMe/CryptAESResponse")]
        byte[] CryptAES(string plainText, byte[] Key, byte[] IV, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptMe/CryptAES", ReplyAction="http://tempuri.org/ICryptMe/CryptAESResponse")]
        System.Threading.Tasks.Task<byte[]> CryptAESAsync(string plainText, byte[] Key, byte[] IV, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptMe/DecryptAES", ReplyAction="http://tempuri.org/ICryptMe/DecryptAESResponse")]
        string DecryptAES(byte[] cipherText, byte[] Key, byte[] IV, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptMe/DecryptAES", ReplyAction="http://tempuri.org/ICryptMe/DecryptAESResponse")]
        System.Threading.Tasks.Task<string> DecryptAESAsync(byte[] cipherText, byte[] Key, byte[] IV, string user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICryptMeChannel : CryptMe_Client.CryptMe.ICryptMe, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CryptMeClient : System.ServiceModel.ClientBase<CryptMe_Client.CryptMe.ICryptMe>, CryptMe_Client.CryptMe.ICryptMe {
        
        public CryptMeClient() {
        }
        
        public CryptMeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CryptMeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptMeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptMeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckUser(string uname, string upwd) {
            return base.Channel.CheckUser(uname, upwd);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserAsync(string uname, string upwd) {
            return base.Channel.CheckUserAsync(uname, upwd);
        }
        
        public bool RegisterUser(string uname, string upwd) {
            return base.Channel.RegisterUser(uname, upwd);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string uname, string upwd) {
            return base.Channel.RegisterUserAsync(uname, upwd);
        }
        
        public byte[] CryptAES(string plainText, byte[] Key, byte[] IV, string user) {
            return base.Channel.CryptAES(plainText, Key, IV, user);
        }
        
        public System.Threading.Tasks.Task<byte[]> CryptAESAsync(string plainText, byte[] Key, byte[] IV, string user) {
            return base.Channel.CryptAESAsync(plainText, Key, IV, user);
        }
        
        public string DecryptAES(byte[] cipherText, byte[] Key, byte[] IV, string user) {
            return base.Channel.DecryptAES(cipherText, Key, IV, user);
        }
        
        public System.Threading.Tasks.Task<string> DecryptAESAsync(byte[] cipherText, byte[] Key, byte[] IV, string user) {
            return base.Channel.DecryptAESAsync(cipherText, Key, IV, user);
        }
    }
}
